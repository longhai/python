import urllib.request
import os
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from xml.etree import ElementTree
import io
import concurrent.futures
import threading
import time
from datetime import timedelta

class DownloaderApp:
    GITHUB_HASH_API = "https://api.github.com/repos/mamedev/mame/contents/hash"

    def __init__(self, root):
        self.root = root
        self.root.title("üì• T·∫£i ·∫£nh t·ª´ XML (MAME Hash)")
        self.root.geometry("900x560")
        self.root.resizable(False, False)
        self.root.configure(bg="#f5f6f5")

        # ====== STATE ======
        self.output_dir = os.path.dirname(os.path.abspath(__file__))  # m·∫∑c ƒë·ªãnh th∆∞ m·ª•c ch·ª©a file .py
        self.cancel_event = threading.Event()
        self.executor = None
        self.total_tasks = 0
        self.completed_tasks = 0
        self.start_time = None
        self.retries = 3
        self.timeout = 20

        self.platform_media_base = {
            "nes": "http://adb.arcadeitalia.net/media/mess.current/ingames/nes/",
            "snes": "http://adb.arcadeitalia.net/media/mess.current/ingames/snes/",
        }

        # ====== STYLES ======
        style = ttk.Style()
        style.theme_use("clam")
        style.configure("TButton", font=("Segoe UI", 10, "bold"), padding=8)
        style.configure("Accent.TButton", foreground="#ffffff", background="#4CAF50")
        style.map("Accent.TButton", background=[("active", "#45a049")])
        style.configure("Danger.TButton", foreground="#ffffff", background="#f44336")
        style.map("Danger.TButton", background=[("active", "#d32f2f")])
        style.configure("TLabel", font=("Segoe UI", 10), background="#f5f6f5")
        style.configure("TCombobox", font=("Segoe UI", 10))
        style.configure("TSpinbox", font=("Segoe UI", 10))
        style.configure("TProgressbar", thickness=18, troughcolor="#e0e0e0", background="#4CAF50")

        # ====== HEADER ======
        header = tk.Canvas(root, height=50, bg="#2196F3", highlightthickness=0)
        header.pack(fill="x")
        header.create_rectangle(0, 0, 900, 50, fill="#2196F3", outline="")
        header.create_text(450, 25, text="üì• T·∫£i ·∫£nh t·ª´ XML (ƒëa lu·ªìng, h·ªßy, log, ETA)", font=("Segoe UI", 14, "bold"), fill="white")

        # ====== MAIN FRAME ======
        main = tk.Frame(root, bg="#f5f6f5")
        main.pack(fill="both", expand=True, padx=12, pady=10)
        main.columnconfigure(0, weight=1)
        main.columnconfigure(1, weight=1)
        main.columnconfigure(2, weight=1)

        # ---- Ch·ªçn th∆∞ m·ª•c ----
        folder_frame = tk.Frame(main, bg="#f5f6f5")
        folder_frame.grid(row=0, column=0, columnspan=3, sticky="ew", pady=(0,6))
        ttk.Label(folder_frame, text="Th∆∞ m·ª•c l∆∞u:").grid(row=0, column=0, sticky="w")
        self.folder_label = ttk.Label(folder_frame, text=self.output_dir)
        self.folder_label.grid(row=0, column=1, sticky="w", padx=(6,6))
        ttk.Button(folder_frame, text="üìÇ Ch·ªçn", style="TButton", command=self.choose_folder).grid(row=0, column=2, sticky="e")

        # ---- C·ªôt tr√°i: danh s√°ch h·ªá m√°y v·ªõi scrollbar ----
        left = tk.LabelFrame(main, text="H·ªá m√°y (ch·ªçn nhi·ªÅu)", bg="#f5f6f5")
        left.grid(row=1, column=0, sticky="nsew", padx=(0,6))
        left.configure(labelanchor="n")

        platform_frame = tk.Frame(left, bg="#f5f6f5")
        platform_frame.pack(fill="both", expand=True, padx=8, pady=8)

        self.platform_list = tk.Listbox(platform_frame, selectmode=tk.EXTENDED, height=14, activestyle="dotbox")
        self.platform_list.pack(side="left", fill="both", expand=True)

        scrollbar = ttk.Scrollbar(platform_frame, orient="vertical", command=self.platform_list.yview)
        scrollbar.pack(side="right", fill="y")
        self.platform_list.config(yscrollcommand=scrollbar.set)

        btns_left = tk.Frame(left, bg="#f5f6f5")
        btns_left.pack(fill="x", padx=8, pady=(0,8))
        ttk.Button(btns_left, text="üîÑ N·∫°p danh s√°ch t·ª´ GitHub", command=self.load_platforms).pack(side="left")

        # ---- C·ªôt gi·ªØa: t√πy ch·ªçn ----
        middle = tk.LabelFrame(main, text="T√πy ch·ªçn", bg="#f5f6f5")
        middle.grid(row=1, column=1, sticky="nsew", padx=6)
        middle.configure(labelanchor="n")

        rowi = 0
        ttk.Label(middle, text="S·ªë lu·ªìng:").grid(row=rowi, column=0, sticky="w", padx=8, pady=6)
        self.thread_var = tk.IntVar(value=16)
        ttk.Spinbox(middle, from_=1, to=64, textvariable=self.thread_var, width=6).grid(row=rowi, column=1, sticky="w")
        rowi += 1

        ttk.Label(middle, text="S·ªë l·∫ßn th·ª≠ l·∫°i (retry):").grid(row=rowi, column=0, sticky="w", padx=8, pady=6)
        self.retry_var = tk.IntVar(value=3)
        ttk.Spinbox(middle, from_=0, to=10, textvariable=self.retry_var, width=6).grid(row=rowi, column=1, sticky="w")
        rowi += 1

        ttk.Label(middle, text="Timeout (gi√¢y):").grid(row=rowi, column=0, sticky="w", padx=8, pady=6)
        self.timeout_var = tk.IntVar(value=20)
        ttk.Spinbox(middle, from_=5, to=120, textvariable=self.timeout_var, width=6).grid(row=rowi, column=1, sticky="w")
        rowi += 1

        self.force_var = tk.BooleanVar(value=False)
        ttk.Checkbutton(middle, text="T·∫£i l·∫°i (ghi ƒë√® n·∫øu t·ªìn t·∫°i)", variable=self.force_var).grid(row=rowi, column=0, columnspan=2, sticky="w", padx=8, pady=6)
        rowi += 1

        # ---- C·ªôt ph·∫£i: ƒëi·ªÅu khi·ªÉn ----
        right = tk.LabelFrame(main, text="ƒêi·ªÅu khi·ªÉn", bg="#f5f6f5")
        right.grid(row=1, column=2, sticky="nsew", padx=(6,0))
        right.configure(labelanchor="n")

        self.start_btn = ttk.Button(right, text="‚¨áÔ∏è B·∫Øt ƒë·∫ßu t·∫£i", style="Accent.TButton", command=self.start_download)
        self.start_btn.pack(fill="x", padx=8, pady=(8,6))
        self.cancel_btn = ttk.Button(right, text="‚èπÔ∏è H·ªßy", style="Danger.TButton", command=self.cancel_download, state=tk.DISABLED)
        self.cancel_btn.pack(fill="x", padx=8, pady=(0,8))

        self.status_label = ttk.Label(right, text="Ch·ªù b·∫Øt ƒë·∫ßu‚Ä¶")
        self.status_label.pack(fill="x", padx=8, pady=4)
        self.eta_label = ttk.Label(right, text="ETA: ‚Äî")
        self.eta_label.pack(fill="x", padx=8, pady=(0,8))

        self.progress = ttk.Progressbar(right, orient="horizontal", mode="determinate", length=260)
        self.progress.pack(fill="x", padx=8, pady=(0,8))

        # ---- Log ----
        log_frame = tk.LabelFrame(main, text="Nh·∫≠t k√Ω", bg="#f5f6f5")
        log_frame.grid(row=2, column=0, columnspan=3, sticky="nsew", pady=(8,0))
        log_frame.configure(labelanchor="n")

        self.log_text = tk.Text(log_frame, height=10, wrap="word", state=tk.DISABLED)
        self.log_text.pack(side="left", fill="both", expand=True, padx=(8,0), pady=8)
        sb = ttk.Scrollbar(log_frame, command=self.log_text.yview)
        sb.pack(side="right", fill="y")
        self.log_text.configure(yscrollcommand=sb.set)

    # ====== UI Helpers ======
    def choose_folder(self):
        directory = filedialog.askdirectory()
        if directory:
            self.output_dir = directory
            self.folder_label.config(text=self.output_dir)

    def load_platforms(self):
        def _task():
            try:
                opener = urllib.request.build_opener()
                opener.addheaders = [('User-Agent', 'Mozilla/5.0')]
                with opener.open(self.GITHUB_HASH_API, timeout=20) as resp:
                    import json
                    data = json.loads(resp.read().decode('utf-8'))
                xmls = [item['name'] for item in data if item.get('name','').endswith('.xml')]
                xmls.sort()
                self.root.after(0, lambda: self._populate_platforms(xmls))
                self.log(f"N·∫°p {len(xmls)} file XML t·ª´ GitHub th√†nh c√¥ng.")
            except Exception as e:
                self.log(f"Kh√¥ng th·ªÉ n·∫°p danh s√°ch t·ª´ GitHub: {e}")
        threading.Thread(target=_task, daemon=True).start()

    def _populate_platforms(self, xml_list):
        self.platform_list.delete(0, tk.END)
        for name in xml_list:
            self.platform_list.insert(tk.END, name)

    def log(self, msg):
        self.log_text.config(state=tk.NORMAL)
        self.log_text.insert(tk.END, msg + "\n")
        self.log_text.see(tk.END)
        self.log_text.config(state=tk.DISABLED)

    def set_controls_running(self, running: bool):
        self.start_btn.config(state=tk.DISABLED if running else tk.NORMAL)
        self.cancel_btn.config(state=tk.NORMAL if running else tk.DISABLED)

    # ====== Networking / Parsing ======
    def get_image_urls(self, platform_xml_name: str):
        xml_url = f"https://raw.githubusercontent.com/mamedev/mame/refs/heads/master/hash/{platform_xml_name}"
        xml_filename = os.path.basename(xml_url)
        xml_name = os.path.splitext(xml_filename)[0]

        base_url = self.platform_media_base.get(xml_name, f"http://adb.arcadeitalia.net/media/mess.current/ingames/{xml_name}/")

        try:
            opener = urllib.request.build_opener()
            opener.addheaders = [('User-Agent', 'Mozilla/5.0')]
            with opener.open(xml_url, timeout=self.timeout_var.get()) as response:
                xml_content = response.read()
            tree = ElementTree.parse(io.BytesIO(xml_content))
            root = tree.getroot()
            image_urls = []
            for sw in root.findall("software"):
                name = sw.get("name")
                if name:
                    image_urls.append(f"{base_url}{name}.png")
            return xml_name, base_url, image_urls
        except Exception as e:
            self.log(f"[L·ªñI] Kh√¥ng th·ªÉ t·∫£i/ƒë·ªçc {platform_xml_name}: {e}")
            return xml_name, base_url, []

    def download_file(self, url: str, save_dir: str, force: bool, retries: int, timeout: int):
        if self.cancel_event.is_set():
            return "ƒê√£ h·ªßy"
        filename = os.path.join(save_dir, url.split("/")[-1])
        if (not force) and os.path.exists(filename):
            return f"B·ªè qua (t·ªìn t·∫°i): {os.path.basename(filename)}"

        for attempt in range(1, retries + 1):
            if self.cancel_event.is_set():
                return "ƒê√£ h·ªßy"
            try:
                opener = urllib.request.build_opener()
                opener.addheaders = [('User-Agent', 'Mozilla/5.0')]
                with opener.open(url, timeout=timeout) as resp:
                    data = resp.read()
                with open(filename, 'wb') as f:
                    f.write(data)
                return f"OK: {os.path.basename(filename)}"
            except Exception as e:
                if attempt < retries:
                    time.sleep(1.0 * attempt)
                else:
                    return f"L·ªói: {os.path.basename(filename)} -> {e}"

    # ====== Download Flow ======
    def start_download(self):
        if not self.output_dir:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c l∆∞u tr∆∞·ªõc.")
            return
        selected = [self.platform_list.get(i) for i in self.platform_list.curselection()]
        if not selected:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt h·ªá m√°y (XML).")
            return

        self.cancel_event.clear()
        self.set_controls_running(True)
        self.progress.config(value=0, maximum=100)
        self.status_label.config(text="ƒêang chu·∫©n b·ªã‚Ä¶")
        self.eta_label.config(text="ETA: ‚Äî")
        self.log("===== B·∫ÆT ƒê·∫¶U =====")

        threading.Thread(target=self._download_task, args=(selected,), daemon=True).start()

    def cancel_download(self):
        self.cancel_event.set()
        self.log("Y√™u c·∫ßu h·ªßy t·∫£i‚Ä¶")

    def _update_progress_ui(self):
        pct = (self.completed_tasks / self.total_tasks) * 100.0 if self.total_tasks > 0 else 0.0
        self.progress.config(value=pct, maximum=100)
        self.status_label.config(text=f"ƒê√£ x·ª≠ l√Ω {self.completed_tasks}/{self.total_tasks} ·∫£nh")

        if self.start_time and self.completed_tasks > 0:
            elapsed = time.time() - self.start_time
            speed = self.completed_tasks / elapsed
            remaining = self.total_tasks - self.completed_tasks
            eta_seconds = remaining / speed if speed > 0 else 0
            self.eta_label.config(text=f"ETA: {str(timedelta(seconds=int(eta_seconds)))}")
        else:
            self.eta_label.config(text="ETA: ‚Äî")

    def _download_task(self, selected_xmls):
        force = self.force_var.get()
        retries = self.retry_var.get()
        timeout = self.timeout_var.get()
        max_workers = self.thread_var.get()

        all_jobs = []
        for platform_xml in selected_xmls:
            if self.cancel_event.is_set():
                break
            xml_name, base_url, image_urls = self.get_image_urls(platform_xml)
            if not image_urls:
                self.log(f"[B·ªé QUA] {platform_xml}: kh√¥ng l·∫•y ƒë∆∞·ª£c URL ·∫£nh.")
                continue
            save_dir = os.path.join(self.output_dir, xml_name)
            os.makedirs(save_dir, exist_ok=True)
            for url in image_urls:
                all_jobs.append((xml_name, save_dir, url))
            self.log(f"{platform_xml}: {len(image_urls)} ·∫£nh | base: {base_url}")

        self.total_tasks = len(all_jobs)
        self.completed_tasks = 0
        self.start_time = time.time()
        self.root.after(0, self._update_progress_ui)

        if self.total_tasks == 0:
            self.root.after(0, lambda: [
                self.set_controls_running(False),
                self.status_label.config(text="Kh√¥ng c√≥ t√°c v·ª•."),
                self.log("Kh√¥ng c√≥ URL ƒë·ªÉ t·∫£i."),
            ])
            return

        master_log_path = os.path.join(self.output_dir, "download.log")
        try:
            log_f = open(master_log_path, "a", encoding="utf-8")
            log_f.write("===== B·∫ÆT ƒê·∫¶U =====\n")
        except Exception:
            log_f = None

        def on_done(future, platform):
            res = future.result()
            if res:
                self.root.after(0, lambda: self.log(f"[{platform}] {res}"))
                if log_f:
                    try:
                        log_f.write(f"[{platform}] {res}\n")
                    except Exception:
                        pass
            self.completed_tasks += 1
            self.root.after(0, self._update_progress_ui)

        try:
            with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as ex:
                futures = []
                for platform, save_dir, url in all_jobs:
                    if self.cancel_event.is_set():
                        break
                    fut = ex.submit(self.download_file, url, save_dir, force, retries, timeout)
                    fut.add_done_callback(lambda f, p=platform: on_done(f, p))
                    futures.append(fut)
                for fut in concurrent.futures.as_completed(futures):
                    if self.cancel_event.is_set():
                        break
        except Exception as e:
            self.root.after(0, lambda: self.log(f"[L·ªñI] Executor: {e}"))
        finally:
            if log_f:
                try:
                    log_f.write("===== K·∫æT TH√öC =====\n")
                    log_f.close()
                except Exception:
                    pass

        def _finish():
            self.set_controls_running(False)
            if self.cancel_event.is_set():
                self.status_label.config(text=f"‚èπÔ∏è ƒê√£ h·ªßy: {self.completed_tasks}/{self.total_tasks}")
                self.log("‚èπÔ∏è ƒê√É H·ª¶Y")
                messagebox.showinfo("ƒê√£ h·ªßy", f"ƒê√£ x·ª≠ l√Ω {self.completed_tasks}/{self.total_tasks} ·∫£nh tr∆∞·ªõc khi h·ªßy.")
            else:
                self.status_label.config(text=f"‚úÖ Ho√†n t·∫•t: {self.completed_tasks}/{self.total_tasks}")
                self.log("‚úÖ HO√ÄN T·∫§T")
                messagebox.showinfo("K·∫øt qu·∫£", f"Ho√†n t·∫•t t·∫£i {self.completed_tasks}/{self.total_tasks} ·∫£nh.\nLog: {master_log_path}")
        self.root.after(0, _finish)

def main():
    root = tk.Tk()
    app = DownloaderApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
